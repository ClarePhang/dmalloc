#
# Sample Malloc rc file for the debug malloc library
# Rename this to .mallocrc and place in your home directory to activate.
# See malloc.info for more information
#
# $Id: dmallocrc,v 1.15 1993/09/22 05:02:25 gray Exp $
#

#
# This file maps tags to certain combinations of tokens.  The tags here
# are only provided as an example.  You are supposed to roll your own.
# Lines in this file should have the form:
#
#	tag	token1, token2, ...
#
# To use the above line you say 'malloc_dbg tag' which enables the debugging
# facilities token1, token2, ...  You must pass the output from malloc_dbg
# through your shell's eval command to change your environment.  Se
# malloc.info for more information.
#
# Lines can be finished with a \ meaning it continues onto the next line.
# Lines begining with '#' or empty lines are ignored
#

#
# Token:			Description:
###########################################################################
# none				no debuging functionality
#
# log-stats			log general statistics
# log-non-free			log non-freed memory pointers on shutdown
# log-perror			log error codes and messages
# log-trans			log memory transactions
# log-admin			log full administrative information
# log-blocks			log detailed block information in heap_map
# log-unknown			log unknown non-freed memory pointers too
# log-bad-space			log some memory from the bad pointers
# log-ra			log non-freed ret-address memory pointers
#
# check-fence			check fence-post areas
# check-heap			do general heap checking
# check-lists			verify internal heap linked-lists
# check-free			check to see if free space has been overwritten
# check-funcs			check the arguments of some routines
#
# realloc-copy			always copy data to a new pointer when realloc
# free-blank			overwrite space that is freed
# error-abort			abort the program (and dump core) on errors
# alloc-blank			overwrite space that is to be alloced
# heap-check-map		log a heap-map every time the heap is checked
# print-perror			dump errors and messages to STDERR
# catch-null			abort program if library can't get sbrk space
#

# no debugging
none	none

# basic production combination
production	log-stats, log-non-free, log-perror, \
		catch-null

# basic runtime development combination
runtime		log-stats, log-non-free, log-perror, \
		check-fence, \
		catch-null

# more logging and some heap checking
2		log-stats, log-non-free, log-perror, log-trans, \
		check-fence, check-heap, check-lists, \
		catch-null, error-abort

# good checking functionality
3		log-stats, log-non-free, log-perror, log-trans, \
		log-admin, log-blocks, \
		check-fence, check-heap, check-lists, \
		check-funcs, \
		alloc-blank, catch-null, error-abort, free-blank, realloc-copy

# extensive checking
4		log-stats, log-non-free, log-perror, log-trans, \
		log-admin, log-blocks, \
		check-fence, check-heap, check-lists, check-funcs, \
		alloc-blank, catch-null, error-abort, free-blank, realloc-copy

# ultra-extensive checking (the whole ball of wax)
5		log-stats, log-non-free, log-perror, log-trans, \
		log-admin, log-blocks, \
		check-fence, check-heap, check-lists, check-free, \
		check-funcs, \
		alloc-blank, catch-null, error-abort, free-blank, realloc-copy

# full fence-post checking
fence		log-stats, log-non-free, log-perror, \
		check-fence, \
		catch-null

# full logging of statistics to logfile and screen
log		log-stats, log-non-free, log-perror, log-trans, \
		log-admin, log-blocks, log-bad-space, \
		check-fence, \
		heap-check-map, print-perror, catch-null

# the kitchen-sink
all		log-stats, log-non-free, log-perror, log-trans, \
		log-admin, log-blocks, log-unknown, log-bad-space, \
		check-fence, check-heap, check-lists, check-free, \
		check-funcs, \
		realloc-copy, free-blank, error-abort, alloc-blank, \
		heap-check-map, print-perror, catch-null
