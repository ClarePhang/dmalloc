/*
 * manual and automatic configuration flags
 *
 * Copyright 1992 by Gray Watson and the Antaire Corporation
 *
 * This file is part of the malloc-debug package.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library (see COPYING-LIB); if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * The author of the program may be contacted at gray.watson@antaire.com
 *
 * $Id: conf.h.in,v 1.14 1993/07/19 18:56:41 gray Exp $
 */

/*
 ************************************************************************
 * MANUAL SETTINGS:
 ************************************************************************
 */

/*
 * include the RCS ids in the .c files and the installed library
 */
#define INCLUDE_RCS_IDS 1

/*
 * should we allow zero length allocations or should be registered as
 * errors.
 * WARNING: this has not been tested although some code does exist for it.
 */
#define ALLOW_ALLOC_ZERO_SIZE 0

/*
 * should we allow realloc of a NULL pointer.  this is useful when you
 * are extending an array in a loop and do not want to allocate it
 * specially the first time.
 */
#define ALLOW_REALLOC_NULL 1

/*
 * the smallest allowable allocations in bits.  The smallest is
 * important because of limitations in terms of internal
 * administrative slots.  Depending on the size of pointers this may
 * have to be increased to get malloc-dbg to stop failing with a
 * MALLOC_BAD_SETUP error.
 */
#define SMALLEST_BLOCK 4

/*
 * the largest allowable allocations in bits.  This is only for
 * verification purposes.  Any allocation larger than this (in bits)
 * will generate a MALLOC_TOO_BIG error.
 */
#define LARGEST_BLOCK 24

/*
 ************************************************************************
 * CONFIGURE DEFINES:
 ************************************************************************
 */

/*
 * (char *)sbrk(int incr) is the main system memory allocation
 * routine.  this extends the program's data space by INCR bytes.
 */
#define HAVE_SBRK 0

/*
 * does your heap grow up?  Hopefully it does because there is not too
 * much support for growing-down heaps because I do not have a system
 * to test it on.
 */
#define HEAP_GROWS_UP 1

/*
 * this is the basic block size in bits.  if possible, the configure
 * script will set this to be the value returned by the getpagesize()
 * function.  if not then some sort of best guess will be necessary.
 * 12 or 13 (meaning basic block size of 4 or 8k) will probably be good.
 *
 * NOTE: some sbrk functions round to the correct page-size.  If this
 * value is too low, the malloc-dbg library may think someone is using
 * sbrk behind its back and return a MALLOC_ALLOC_NONLINEAR error.  No
 * problems should happen if this value is too high.
 */
#define BASIC_BLOCK 12

/*
 * the alignment value of all allocations in number of bits for
 * loading admin information before an allocation.  if possible, the
 * configure script will set this to be the value returned by
 * sizeof(long) which in most systems is the register width.
 *
 * NOTE: the value will never be auto-configured to be less than 3
 * bits (i.e. sizeof(long) == 8) because some system (like sparc for
 * instance) report the sizeof(long) == 4 while the register size is
 * 8 bytes.  Because of the register size, certain memory needs to be
 * base 8 (stack frames, code, etc.).
 *
 * NOTE: larger the number the more memory may be wasted with certain
 *       combinations of requested admin info like fence-post checking.
 */
#define ALLOCATION_ALIGNMENT 3

/*
 * if your system unstands const.
 */
#define const	const

/*
 * LIBRARY DEFINES:
 */

/*
 * the Malloc-Debug library provides its own versions of the following
 * functions,  or knows how to work around their absence.
 */
#define HAVE_BCMP 0
#define HAVE_BCOPY 0

#define HAVE_MEMCMP 0
#define HAVE_MEMCPY 0
#define HAVE_MEMSET 0

#define HAVE_INDEX 0
#define HAVE_RINDEX 0

#define HAVE_STRCAT 0
#define HAVE_STRCMP 0
#define HAVE_STRLEN 0
#define HAVE_STRTOK 0

/*
 * the below functions are here to provide function argument checking only.
 */
#define HAVE_BZERO 0

#define HAVE_MEMCCPY 0
#define HAVE_MEMCHR 0

#define HAVE_STRCHR 0
#define HAVE_STRRCHR 0
#define HAVE_STRCPY 0
#define HAVE_STRNCPY 0
#define HAVE_STRCASECMP 0
#define HAVE_STRNCASECMP 0
#define HAVE_STRSPN 0
#define HAVE_STRCSPN 0
#define HAVE_STRNCAT 0
#define HAVE_STRNCMP 0
#define HAVE_STRPBRK 0
#define HAVE_STRSTR 0
