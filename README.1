-------------------------------------------------------------------------------
$Id: README.1,v 1.33 1993/12/20 06:30:20 gray Exp $
-------------------------------------------------------------------------------

INSTALLATION:

1) Run 'sh ./configure' to configure the library.  You may want to first
	examine the 'configure.help' file for some information about
	configure.  Configure should generate the Makefile as well as
	at least one .h file and should configure any subdirectories
	(if necessary).

	NOTE: It seems that some versions of tr (especially from
	HP-UX) don't understand "tr '[a-z]' '[A-Z]'".  Since configure
	uses tr often, you may need to either get gnu's tr or generate
	the conf.h and Makefile by hand.

2) You may want to examine the files created by configure to make sure
	it did its job correctly.

3) Examine the manual settings section of conf.h to tune some specific
	features of the library.

4) Typing 'make' should be enough to build libmalloc.a and
	malloc_dbg program as well as the argv subdirectory.

5) Typing 'make tests' should build the malloc_t test program.

6) Typing 'make light' should run the malloc_t test program through
	a set of light trials.  By default this will execute malloc_t
	5 times -- each time will execute 10,000 malloc operations in
	a very random manner.  Very anal folks can 'make heavy' to up
	the ante.  Use 'malloc_t --usage-long' for the list of all
	malloc_t options.

See the 'Quick Start' section below or examine the malloc.info file to
get up and running with the library.

-------------------------------------------------------------------------------

ANTAIRE REPOSITORY:

Currently, you can get the newest and bestest versions of the
malloc_dbg library from anonymous ftp via ftp.antaire.com in the
/antaire/src/malloc_dbg directory.

The versions in this repository also include such files as a
postscript version of the manual and other large files which may not
have been included in the distribution you recieved.

OTHER REPOSITORIES:

You can also get a recent version from anonymous ftp via
gatekeeper.dec.com in the /pub/misc/malloc_dbg directory.  This
repository has been made available through the generosity of the
Digital Equipment Corporation with special help from Dave Hill and the
gatekeepers.

Thanks much to them all.

-------------------------------------------------------------------------------

DOCUMENTATION:

Examine the malloc.info file.  Is is a gnu-info file having the
user-documentation for the malloc subsystem.  It can be installed in
the emacs info directory and read with emacs/info or the info program
available from the texinfo package at GNU archive sites.  It is also
suitable for reading as text.

It can be reproduced from the malloc.texi texinfo file which also can
generate TeX hardcopy output with the help of the texinfo.tex file.

A malloc.ps postscript file may also have been included for you
TeX-less folks.

Important sections from malloc.info:

* Overview::                    General debugging concepts.
* Debug Tokens::                Description of the debugging token flags.
* Extensions::                  Additional non-standard routines.
* Malloc_dbg Program::          Env variable setting utility.
* Debugging with the Library::  How to debug problems with the library

-------------------------------------------------------------------------------

GENERAL:

- the system is pretty dependent on a good ansi-c compiler like gcc.
	Non-ansi folks might have to:

	- add some sort of ansi option to your compiler
	- change stdarg.h and ... to varargs.h and va_alist, etc. in error.c
	- change all (void *) references to (char *).
	- possibly fix all the functions to remove the foo(char * var) decls.

- the file Manifest contains a list of each of the files and what it does.

- configure can be regenerated by the autoconf script (versions 1.6 and above)

- this malloc has never been (and maybe never will be) optimized for
	space nor speed.  it is *very* wasteful and while handling
	large allocations or tons of concurrent small allocations, it
	can quickly become a monster.

-------------------------------------------------------------------------------

QUICK START:

This section should give you a quick idea on how to get going.  To get
the most of the library however, I'd recommend at least taking a peak
at the info file's Features, Usage, and Programming sections.

Basically, you need to do 6 things to make use of the library:

1)	Follow the installation instructions about to configure and
	make the library.

2)	Install the malloc_dbg program in your favorite bin directory,
	the libmalloc_dbg.a library in the correct lib directory, and
	the malloc_dbg.h include file in the correct include
	directory.

3)	Install the mallocrc file in your home directory as .mallocrc.
	You may want to take a look at the file and add your own
	combination of tokens.

4)	Setup an alias to malloc and put in your shell's rc file.  For
	csh/tcsh users (notice the -C option for c-shell output):

		alias malloc 'eval `malloc_dbg -C \!*`'

	For zsh users (notice the -b option for bourne shell output):

		malloc() { eval `malloc_dbg -b $*` }

5)	Link the library with your program after possibly
	including malloc_dbg.h in your C files and recompiling.

6)	Type: 'malloc -l logfile -i 100 1' (for example).  This will:

	- set the malloc log path to 'logfile' (-l logfile)
	- have the library check itself every 100 iterations (-i 100)
	- enable a certain combination of debug tokens (tag '1').

	malloc_dbg --usage-long might help for more usage info for the
	malloc_dbg program.

7)	Run your program.  And voila!

-------------------------------------------------------------------------------

ARGV LIBRARY:

I am the author of the argv library which should have been included
with this package.  I use it with all my binaries.  It is like getopt
in that it provides a standardized way of processing arguments but I
find it signficantly better.  You have to write no C code to do the
actual processing, it handles short -l and long --logfile style
options, gives standard short and long usage messages, and many other
features while trying to comply with POSIX specs.

For copies of the library, in the future (possibly currently depending
on the age of this file), try ftp.antaire.com in the /antaire/src/argv
directory.

-------------------------------------------------------------------------------

THANKS:

Many net folk contributed to the library and my thanks goes out to
them all.

Special thanks, however, to my core contributors/testers: Scott
Michel, Greg Sylvain, Bali Jatinder, Marc Evans, Dave Hill, Manfred
Hauswirth, and Richard Birnbaum.

-------------------------------------------------------------------------------

AUTHOR:

If you have any questions, comments, or problems feel free to send me
mail.

gray.watson@antaire.com

-------------------------------------------------------------------------------
