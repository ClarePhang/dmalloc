-------------------------------------------------------------------------------
$Id: README.1,v 1.30 1993/10/03 02:01:16 gray Exp $
-------------------------------------------------------------------------------

INSTALLATION:

1) Run 'sh ./configure' to configure the library and generate the
	conf.h, const.h, and Makefile as well as configure the argv
	subdirectory.  Examine the conf.h files as well as the
	Makefiles to make sure configure set things up correctly.

	NOTE: It seems that some versions of tr (especially from
	HP-UX) don't understand "tr '[a-z]' '[A-Z]'".  Since configure
	uses tr often, you may need to either get gnu's tr or generate
	the conf.h and Makefile by hand.

2) Examine the manual settings section of conf.h to tune some specific
	features of the library.  

3) Typing 'make' should be enough to build libmalloc.a and
	malloc_dbg program as well as the argv subdirectory.

4) Typing 'make tests' should build the malloc_t test program
	(more automated test facilities are needed!!)

See the 'Quick Start' section below or examine the malloc.info file to
get up and running with the library.

-------------------------------------------------------------------------------

REPOSITORY:

Currently, you can get the newest and bestest versions of the
malloc_dbg library from anonymous ftp via gatekeeper.dec.com in the
/pub/misc/malloc_dbg directory.

The versions in this repository also include such files as a
postscript version of the manual and other large files which may not
have been included in the distribution you recieved.

This repository has been made available through the generosity of the
Digital Equipment Corporation with special help from Dave Hill and the
gatekeepers.

Thanks much to them all.

Additional thanks to Doug Balog and Pittsburgh Supercomputing Center
for past repository space and assistance.

ANTAIRE REPOSITORY:

In the future (possibly currently depending on the age of this file),
also try ftp.antaire.com in the /pub/antaire/malloc_dbg directory.

-------------------------------------------------------------------------------

DOCUMENTATION:

Examine the malloc.info file.  Is is a gnu-info file having the
user-documentation for the malloc subsystem.  It can be installed in
the emacs info directory and read with emacs/info or the info program
available from the texinfo package at GNU archive sites.  It is also
suitable for reading as text.

It can be reproduced from the malloc.texi texinfo file which also can
generate TeX hardcopy output with the help of the texinfo.tex file.

A malloc.ps postscript file may also have been included for you
TeX-less folks.

-------------------------------------------------------------------------------

GENERAL:

- the system is pretty dependent on a good ansi-c compiler like gcc.
	non-ansi folks might have to:
	- add some sort of ansi option to your compiler
	- change stdarg.h and ... to varargs.h and va_alist, etc. in error.c
	- change all (void *) references to (char *).
	- possibly fix all the functions to remove the foo(char * var) decls.
- the file Manifest contains a list of each of the files and what it does.
- configure might be able to be regenerated by the autoconf script.
	- NOTE: I have modified my autoconf to handle multiple config files.
	- future versions of autoconf may do this automatically
- this malloc has never been (and maybe never will be) optimized for
	space nor speed.  it is *very* wasteful and during the
	handling of large allocations or tons of concurrent small
	allocations, it can quickly become a monster.

-------------------------------------------------------------------------------

QUICK START:

If you are not interested in RTFM then shame on you!!  I'll be
generous and provide a few quick-start tips anyway.  To get the most
of the library however, I'd recommend at least taking a peak at the
info file's Features section.

You need to do 6 things to make use of the library:

1)	Follow the installation instructions about to configure and
	make the library.

2)	Install the malloc_dbg program in your favorite bin directory,
	the libmalloc_dbg.a library in the correct lib directory, and
	the malloc_dbg.h include file in the correct include
	directory.  You may want to install libargv.a and argv.h
	although it is not necessary.

3)	Install the mallocrc file in your home directory as .mallocrc.
	You may want to take a look at the file and add your own
	combination of tokens.

4)	Setup an alias to malloc and put in your shell's rc file.  For
	csh/tcsh users (notice the -C option for c-shell output):

		alias malloc 'eval `malloc_dbg -C \!*`'

	For zsh users (notice the -b option for bourne shell output):

		malloc() { eval `malloc_dbg -b $*` }

5)	Link the library with your program after possibly
	including malloc_dbg.h in your C files and recompiling.

6)	Typing 'malloc -l logfile 5' (for example) to enable a certain
	combination of number of debug tokens and set the malloc
	log path to 'logfile'.  malloc_dbg --usage-long might help.

7)	Run your program.  And voila!

-------------------------------------------------------------------------------

THANKS:

Many net folk contributed to the library and my thanks goes out to
them all.

Special thanks, however, to Scott Michel <scottm@intime.intime.COM>
for listening to my endless chatter and finding/solvings lots of
stupid problems during the alpha stages of this library.

-------------------------------------------------------------------------------

AUTHOR:

If you have any questions or problems feel free to send me mail.
gray.watson@antaire.com

-------------------------------------------------------------------------------
