-------------------------------------------------------------------------------
$Id: README.1,v 1.21 1993/06/03 20:02:19 gray Exp $
-------------------------------------------------------------------------------

INSTALLATION:

1) Run 'sh ./configure' to configure the library and generate the
	Makefile and conf.h.  Examine conf.h (especially) as well as
	Makefile to make sure configure set things up correctly.

	NOTE: It seems that some versions of tr (especially from
	HP-UX) don't understand "tr '[a-z]' '[A-Z]'". You may need to
	either get gnu's tr or generate the conf.h and Makefile by
	hand.

2) Typing 'make' should be enough to build libmalloc.a and
	malloc_dbg program.

3) Typing 'make tests' should build the malloc_t test program
	(more automated test facilities are needed!!)

See the 'Quick Start' section below or examine the malloc.info file to
get up and running with the library.

-------------------------------------------------------------------------------

REPOSITORY:

Currently, you can get the newest and bestest versions of the
malloc_dbg library from anonymous ftp via ftp.psc.edu in the
/pub/malloc_dbg directory.

This repository has been made available through the generosity of the
Pittsburgh Supercomputing Center with special help from Doug Balog.

Thanks much to them both.

-------------------------------------------------------------------------------

DOCUMENTATION:

Examine the malloc.info file.  Is is a gnu-info file having the
user-documentation for the malloc subsystem.  It can be installed in
the emacs info directory and read with emacs/info or the info program
available at GNU archive sites.  It is also suitable for reading as
text.

It can be reproduced from the malloc.texi texinfo file which also can
generate TeX hardcopy output.  You may need the new texinfo.tex from
the gnu archive sites.

-------------------------------------------------------------------------------

GENERAL:

- the system is pretty dependent on a good ansi-c compiler like gcc.
	non-ansi folks with have to:
	- define const to be nothing in malloc_dbg.h
	- change stdarg.h and ... to varargs.h and va_alist, etc. in error.c
	- possibly fix all the functions to remove the foo(char * var) decls.
- the file Manifest contains a list of each of the file and what it does.
- configure can be regenerated by the autoconf script.
- the file sample.c contains an example of some of the malloc macros
	and functions.
- this malloc has never been (and maybe never will be) optimized for
	space nor speed.  it is *very* wasteful and during the
	handling of large allocations or tons of concurrent small
	allocations, it can quickly become a monster.

-------------------------------------------------------------------------------

QUICK START:

If you are not interested in RTFM then shame on you!!  I'll be
generous and provide a few quick-start tips anyway.  To get the most
of the library however, I'd recommend at least taking a peak at the
info file's Features section.

You need to do 6 things to make use of the library:

1)	Configure and make the library and program, and install the
	malloc_dbg program in your favorite bin directory, the
	libmalloc_dbg.a library in the correct lib directory, and the
	malloc_dbg.h include file in the correct inc directory.

2)	Install the mallocrc file in your home directory as .mallocrc.
	You may want to take a look at the file and add your own
	combination of tokens.

3)	Setup an alias to malloc and put in your shell's rc file.  For
	csh/tcsh users:

		alias malloc 'eval `malloc_dbg \!*`'

	For zsh users:

		malloc() { eval `malloc_dbg -b $*` }

4)	Link the library with your program after possibly
	including malloc_dbg.h in your C files and recompiling.

5)	Typing 'malloc -l logfile 5' (for example) to enable a certain
	combination of number of debug tokens and set the malloc
	log path to 'logfile'.  malloc --usage might help.

6)	Run your program.

-------------------------------------------------------------------------------

THANKS:

Many net folk contributed to the library and my thanks goes out to
them all.

Special thanks, however, to Scott Michel <scottm@intime.intime.COM>
for listening to my endless chatter and finding/solvings lots of
stupid problems during the alpha stages of this library.

-------------------------------------------------------------------------------

AUTHOR:

If you have any questions or problems feel free to send me mail.
gray.watson@antaire.com

-------------------------------------------------------------------------------
