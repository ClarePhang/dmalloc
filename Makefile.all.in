###############################################################################
# Makefile for the DMalloc library.
# $Id: Makefile.all.in,v 1.103 2000/11/14 21:02:29 gray Exp $
###############################################################################

# default root installation directory
prefix = @prefix@
exec_prefix = @exec_prefix@

srcdir = @srcdir@
VPATH = @srcdir@

bindir = @bindir@
libdir = @libdir@
shlibdir = @shlibdir@
incdir = $(prefix)/include
infodir = $(prefix)/info
docdir = $(prefix)/share/doc/$(MODULE)

# default c-compiler
CC = @CC@
CXX = @CXX@

DEFS	= -DHAVE_STDARG_H=@HAVE_STDARG_H@ \
	-DHAVE_STDLIB_H=@HAVE_STDLIB_H@ \
	-DHAVE_STRING_H=@HAVE_STRING_H@ \
	-DHAVE_UNISTD_H=@HAVE_UNISTD_H@ \
	-DHAVE_SYS_MMAN_H=@HAVE_SYS_MMAN_H@ \
	-DHAVE_SYS_TYPES_H=@HAVE_SYS_TYPES_H@ \
	$(DEFINES)
INCS = -I. -I$(srcdir) $(INCLUDES)
LIBS = -L. @LIBS@

MODULE	= dmalloc

LIBRARY	= lib$(MODULE).a
SHLIBRARY = lib$(MODULE).so

# thread version of the library
LIB_TH	= lib$(MODULE)th.a
SHLIB_TH = lib$(MODULE)th.so
@TH_ON@BUILD_ALL_1 = $(LIB_TH)
@TH_ON@INSTALL_LIB_1 = installth

# C++ version of the library
LIB_CXX	= lib$(MODULE)xx.a
SHLIB_CXX = lib$(MODULE)xx.so
@CXX_ON@BUILD_ALL_2 = $(LIB_CXX)
@CXX_ON@INSTALL_LIB_2 = installcxx

# threads + C++
LIB_TH_CXX = lib$(MODULE)thcxx.a
@CXX_ON@@TH_ON@BUILD_ALL_3 = $(LIB_TH_CXX)
@CXX_ON@BUILD_THREADS_3 = $(LIB_TH_CXX)
@TH_ON@BUILD_CXX_3 = $(LIB_TH_CXX)
@TH_ON@INSTALL_CXX_3 = installthcxx
@CXX_ON@INSTALL_THREADS_3 = installthcxx
@CXX_ON@@TH_ON@INSTALL_LIB_3 = installthcxx

# now construct our build and install targets
BUILD_ALL = dmalloc.h $(LIBRARY) $(LIB_DIS) $(UTIL) \
	$(BUILD_ALL_1) $(BUILD_ALL_2) $(BUILD_ALL_3)
BUILD_CXX = $(LIB_CXX) \
	$(BUILD_CXX_1) $(BUILD_CXX_2) $(BUILD_CXX_3)
BUILD_THREADS = $(LIB_TH) \
	$(BUILD_THREADS_1) $(BUILD_THREADS_2) $(BUILD_THREADS_3)
INSTALL_LIB = $(LIBRARY) $(LIB_DIS) \
	$(INSTALL_LIB_1) $(INSTALL_LIB_2) $(INSTALL_LIB_3)
INSTALL_CXX = $(LIB_CXX) \
	$(INSTALL_CXX_1) $(INSTALL_CXX_2) $(INSTALL_CXX_3)
INSTALL_THREADS = $(LIB_TH) \
	$(INSTALL_THREADS_1) $(INSTALL_THREADS_2) $(INSTALL_THREADS_3)

# library with dmalloc disabled
LIB_DIS	= lib$(MODULE)lp.a
SHLIB_DIS = lib$(MODULE)lp.so

UTIL = $(MODULE)
INFOFILE = $(MODULE).info
HTMLFILE = $(MODULE).html
TEXIFILE = $(MODULE).texi
DOCFILES = $(HTMLFILE) $(TEXIFILE)

CCFLAGS = @CFLAGS@
LDFLAGS = @LDFLAGS@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

###############################################################################
# End of system configuration section.
###############################################################################

SHELL = /bin/sh

HFLS = dmalloc.h
OBJS = arg_check.o compat.o dmalloc_lp.o dmalloc_tab.o env.o heap.o protect.o
NORMAL_OBJS = chunk.o error.o malloc.o
THREAD_OBJS = chunk_th.o error_th.o malloc_th.o
CXX_OBJS = dmallocc.o

CFLAGS = $(CCFLAGS)
TEST = $(MODULE)_t

all : $(BUILD_ALL)
@CXX_OFF@	@echo "To make the C++ version of the library type 'make cxx'"
@TH_OFF@	@echo "To make the thread version of the library type 'make threads'"

clean :
	rm -f a.out core *.o *.t
	rm -f $(LIBRARY) $(LIB_TH) $(LIB_CXX) $(LIB_TH_CXX) $(LIB_DIS) $(TEST)
	rm -f $(UTIL) dmalloc.h

realclean : clean

distclean : clean
	rm -f confdefs.h config.status config.log config.cache conf.h
	rm -f Makefile settings.h dmalloc.h.2
#	rm -f configure

installdirs :
	$(srcdir)/mkinstalldirs $(incdir) $(libdir) $(bindir)

installincs : $(HFLS)
	$(srcdir)/mkinstalldirs $(incdir)
	$(INSTALL_DATA) $(HFLS) $(incdir)

installcxx : $(INSTALL_CXX)
	$(srcdir)/mkinstalldirs $(libdir)
	$(INSTALL_DATA) $(LIB_CXX) $(libdir)
@TH_OFF@	@echo "Enter 'make installthcxx' to install the threaded C++ library"

installth : $(INSTALL_THREADS)
	$(srcdir)/mkinstalldirs $(libdir)
	$(INSTALL_DATA) $(LIB_TH) $(libdir)
@CXX_OFF@	@echo "Enter 'make installthcxx' to install the threaded C++ library"

installthcxx : $(LIB_TH_CXX)
	$(srcdir)/mkinstalldirs $(libdir)
	$(INSTALL_DATA) $(LIB_TH_CXX) $(libdir)

installlib : $(INSTALL_LIB)
	$(srcdir)/mkinstalldirs $(libdir)
	$(INSTALL_DATA) $(LIBRARY) $(libdir)
	@RANLIB@ $(libdir)/$(LIBRARY)
	$(INSTALL_DATA) $(LIB_DIS) $(libdir)
	@RANLIB@ $(libdir)/$(LIB_DIS)

installinfo : $(srcdir)/$(INFOFILE)
	$(srcdir)/mkinstalldirs $(infodir)
	$(INSTALL_DATA) $(srcdir)/$(INFOFILE) $(infodir)

installdocs : $(srcdir)/$(HTMLFILE) $(srcdir)/$(TEXIFILE)
	$(srcdir)/mkinstalldirs $(docdir)
	$(INSTALL_DATA) $(srcdir)/$(HTMLFILE) $(srcdir)/$(TEXIFILE) $(docdir)

installshlib : $(SHLIBRARY)
	$(srcdir)/mkinstalldirs $(shlibdir)
	$(INSTALL_DATA) $(srcdir)/$(SHLIBRARY) $(shlibdir)

install : installdirs installincs installlib $(UTIL)
	$(srcdir)/mkinstalldirs $(bindir)
	$(INSTALL_PROGRAM) $(UTIL) $(bindir)
	@echo "Enter 'make installinfo' to install $(INFOFILE) in $(infodir)"
	@echo "Enter 'make installdocs' to install $(DOCFILES) in $(docdir)"
	@echo "Enter 'make installshlib' to install $(SHLIBRARY) in $(shlibdir)"
@CXX_OFF@	@echo "Enter 'make installcxx' to install the C++ library"
@TH_OFF@	@echo "Enter 'make installth' to install thread library"

dmalloc.h.2 : $(srcdir)/configure
	$(SHELL) $(srcdir)/configure

settings.h : $(srcdir)/settings.dist $(srcdir)/configure
	$(SHELL) $(srcdir)/configure

dmalloc.h : $(srcdir)/dmalloc.h.1 dmalloc.h.2 $(srcdir)/dmalloc.h.3
	rm -f $@ $@.t
	cat $(srcdir)/dmalloc.h.1 dmalloc.h.2 $(srcdir)/dmalloc.h.3 > $@.t
	mv $@.t $@

shlib : $(SHLIBRARY)

# NOTE: you may have to edit the following to have it work on your system
$(SHLIBRARY) : $(LIBRARY)
	rm -f $@ $@.t
	if (ld --version | grep '^GNU' >/dev/null 2>&1); then \
	  ld -shared -soname $@ --whole-archive $(LIBRARY) -o $@.t ; \
	else \
	  ld -shared -soname $@ -all -none -lc $(LIBRARY) -o $@.t ; \
	fi
	mv $@.t $@

$(LIBRARY) : $(OBJS) $(NORMAL_OBJS)
	ar cr $@ $?
	@RANLIB@ $@

$(LIB_TH_CXX) : $(OBJS) $(THREAD_OBJS) $(CXX_OBJS)
	ar cr $@ $?
	ranlib $@

$(LIB_TH) : $(OBJS) $(THREAD_OBJS)
	ar cr $@ $?
	ranlib $@

$(LIB_CXX) : $(OBJS) $(NORMAL_OBJS) $(CXX_OBJS)
	ar cr $@ $?
	ranlib $@

$(LIB_DIS) : dmalloc_lp.o
	ar cr $@ $?
	@RANLIB@ $@

threadscxx : $(LIB_TH_CXX)

threads : $(BUILD_THREADS)
@CXX_OFF@	@echo "Enter 'make threadscxx' to build the threaded C++ library"

cxx : $(BUILD_CXX)

utils : $(UTIL)

$(UTIL) : $(UTIL).o dmalloc_argv.o compat.o env.o
	rm -f $@
	$(CC) $(LDFLAGS) $(UTIL).o dmalloc_argv.o compat.o env.o $(LIBS)
	mv a.out $@

# special _th versions of objects with the LOCK_THREADS variable defined to 1
chunk_th.o : $(srcdir)/chunk.c
	rm -f $@
	$(CC) $(CFLAGS) $(CPPFLAGS) $(DEFS) $(INCS) -DLOCK_THREADS=1 \
		-c $(srcdir)/chunk.c -o ./$@

error_th.o : $(srcdir)/error.c
	rm -f $@
	$(CC) $(CFLAGS) $(CPPFLAGS) $(DEFS) $(INCS) -DLOCK_THREADS=1 \
		-c $(srcdir)/error.c -o ./$@

malloc_th.o : $(srcdir)/malloc.c
	rm -f $@
	$(CC) $(CFLAGS) $(CPPFLAGS) $(DEFS) $(INCS) -DLOCK_THREADS=1 \
		-c $(srcdir)/malloc.c -o ./$@

tests : $(TEST)

$(TEST) : $(TEST).o dmalloc_argv.o $(LIBRARY)
	rm -f $@
	$(CC) $(LDFLAGS) $(TEST).o dmalloc_argv.o $(LIBS) -l$(MODULE)
	mv a.out $@

check light : $(TEST)
	./$(TEST) -s -t 10000
	./$(TEST) -s -t 10000
	./$(TEST) -s -t 10000
	./$(TEST) -s -t 10000
	./$(TEST) -s -t 10000
	@echo tests have passed

heavy : $(TEST) light
	./$(TEST) -s -t 100000
	./$(TEST) -s -t 100000
	./$(TEST) -s -t 100000
	@echo heavy tests have passed

.c.o :
	rm -f $@
	$(CC) $(CFLAGS) $(CPPFLAGS) $(DEFS) $(INCS) -c $< -o ./$@

#
# .cc.o auto-target doesn't work on some systems. 
# also, $? did not work on OSF for the -c, grrr
#
dmallocc.o : $(srcdir)/dmallocc.cc
	rm -f $@
	$(CXX) $(CFLAGS) $(CPPFLAGS) $(DEFS) $(INCS) -c $(srcdir)/dmallocc.cc \
		-o ./$@

.texi.info :
	makeinfo --no-split $<

#
# auto configure settings - uncomment if you are doing configure
# development on the library
#

#Makefile : $(srcdir)/Makefile.in config.status
#	$(SHELL) config.status

#conf.h : $(srcdir)/conf.h.in config.status
#	$(SHELL) config.status

#config.status : $(srcdir)/configure
#	$(SHELL) config.status --recheck

# $(srcdir)/configure : $(srcdir)/configure.in
#	cd $(srcdir); autoconf

###############################################################################
#
# These dependencies are automatically generated.  Do not edit by hand.
#

arg_check.o: arg_check.c dmalloc.h conf.h settings.h chunk.h \
 debug_val.h dmalloc_loc.h error.h arg_check.h
chunk.o: chunk.c conf.h settings.h dmalloc.h chunk.h chunk_loc.h \
 dmalloc_loc.h compat.h debug_val.h dmalloc_tab.h error.h error_val.h \
 heap.h protect.h
compat.o: compat.c dmalloc.h conf.h settings.h compat.h dmalloc_loc.h
dmalloc.o: dmalloc.c dmalloc_argv.h conf.h settings.h dmalloc.h \
 compat.h debug_tok.h dmalloc_loc.h debug_val.h env.h error_str.h \
 error_val.h version.h
dmalloc_argv.o: dmalloc_argv.c conf.h settings.h dmalloc_argv.h \
 dmalloc_argv_loc.h compat.h
dmalloc_lp.o: dmalloc_lp.c dmalloc.h conf.h settings.h error_val.h \
 dmalloc_loc.h dmalloc_lp.h malloc_funcs.h error.h return.h
dmalloc_t.o: dmalloc_t.c conf.h settings.h dmalloc_argv.h dmalloc.h \
 debug_val.h dmalloc_loc.h error_val.h
dmalloc_tab.o: dmalloc_tab.c conf.h settings.h chunk.h compat.h \
 dmalloc.h dmalloc_loc.h error.h error_val.h dmalloc_tab.h \
 dmalloc_tab_loc.h
env.o: env.c conf.h settings.h dmalloc.h compat.h dmalloc_loc.h \
 debug_tok.h debug_val.h env.h error.h
error.o: error.c conf.h settings.h dmalloc.h compat.h debug_val.h \
 dmalloc_loc.h env.h error.h error_val.h version.h
heap.o: heap.c dmalloc.h conf.h settings.h chunk.h compat.h \
 debug_val.h dmalloc_loc.h error.h error_val.h heap.h
malloc.o: malloc.c conf.h settings.h dmalloc.h chunk.h compat.h \
 debug_val.h dmalloc_loc.h env.h error.h error_str.h error_val.h \
 heap.h dmalloc_lp.h malloc_funcs.h return.h
protect.o: protect.c conf.h settings.h dmalloc.h dmalloc_loc.h error.h \
 heap.h protect.h
chunk_th.o: chunk.c conf.h settings.h dmalloc.h chunk.h chunk_loc.h \
 dmalloc_loc.h compat.h debug_val.h dmalloc_tab.h error.h error_val.h \
 heap.h protect.h
error_th.o: error.c conf.h settings.h dmalloc.h compat.h debug_val.h \
 dmalloc_loc.h env.h error.h error_val.h version.h
malloc_th.o: malloc.c conf.h settings.h dmalloc.h chunk.h compat.h \
 debug_val.h dmalloc_loc.h env.h error.h error_str.h error_val.h \
 heap.h dmalloc_lp.h malloc_funcs.h return.h
